AWSTemplateFormatVersion: "2010-09-09"
Description: Top-level stack template that deploys a City .

Parameters:
  AppName: { Type: String, Default: Taskify }
  ProjectTag: { Type: String, Default: "incident-app" }
  GitRepoUrl: { Type: String, Default: https://github.com/drex7/cmrp-frontend.git }
  GitHubTokenSecret: { Type: String, Default: cmrp-frontend/token }

Resources:
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmplifyServiceRole
      Description: IAM role assumed by AWS Amplify to build and deploy apps
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: amplify.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: IncidentReportingAmplifyApp
      Description: Incident Reporting App
      Repository: !Ref GitRepoUrl
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      AccessToken: !Sub '{{resolve:secretsmanager:${GitHubTokenSecret}:SecretString:GithubAccessToken_}}'
      BuildSpec: |
        version: 1
        backend:
          phases:
            build:
              commands:
                - yarn install --frozen-lockfile --cache-folder .yarn-cache --prefer-offline
                - echo $AWS_BRANCH
                - |
                  case "${AWS_BRANCH}" in
                    main)
                        echo "Deploying main branch"
                        npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
                        ;;
                    dev)
                        echo "Deploying dev branch"
                        npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID
                        ;;
                    feature*)
                        echo "Deploying feature branch"
                        npx ampx generate outputs --branch previews --app-id $AWS_APP_ID
                        ;;
                    *)
                        echo "No deployment for branch ${AWS_BRANCH}"
                        ;;
                  esac
        frontend:
          phases:
            preBuild:
              commands:
                - npx ng version
            build:
              commands:
                - npx ng build --configuration=production
          artifacts:
            baseDirectory: dist/cmrp-frontend/browser
            files:
              - '**/*'
          cache:
            paths:
              - .npm/**/*
              - node_modules/**/*

  MainBranch:
    Type: AWS::Amplify::Branch
    DependsOn: AmplifyApp
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true
      Stage: PRODUCTION

  DevBranch:
    Type: AWS::Amplify::Branch
    DependsOn: AmplifyApp
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: dev
      EnableAutoBuild: true
      Stage: DEVELOPMENT



  ################################################## Cognito ####################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: IncidentReportingUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageFunction.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: country
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: telephone
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IncidentReportingFrontendClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Precedence: 1

  CityOfficialGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: CityOfficial
      UserPoolId: !Ref UserPool
      Precedence: 2



  ################################################## APIs & Functions ##########################################

  AdminInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminInviteUserFunction
      Description: Allows Admins to invite new Admins or City Officials
      CodeUri: admin_invite/
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /invite
            Method: POST
            Auth:
              Authorizer: CognitoAuth

  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoCustomMessageFunction
      Description: Customizes Cognito emails for invites and password resets
      CodeUri: custom_message/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  CustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomMessageFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # API Gateway Cognito Authorizer
  CognitoAuth:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoUserPoolAuth
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ServerlessRestApi
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn


Outputs:
  AmplifyAppId:
    Description: The ID of the deployed Amplify application
    Value: !GetAtt AmplifyApp.AppId
  AmplifyAppName:
    Description: The name of the deployed Amplify application
    Value: !GetAtt AmplifyApp.AppName

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool

  ApiGatewayUrl:
    Description: Base URL for API Gateway
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    